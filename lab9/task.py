import pygame
import random
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ –±–ª–æ–∫–æ–≤
BLOCK = 20
WIDTH = 600
HEIGHT = 400
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Extended üçè‚è±Ô∏è")

# –¶–≤–µ—Ç–∞
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
DARKGREEN = (0, 155, 0)
RED = (255, 0, 0)
WHITE = (255, 255, 255)
GOLD = (255, 215, 0)

# –®—Ä–∏—Ñ—Ç
font = pygame.font.SysFont("Verdana", 20)

# –ó–º–µ–π–∫–∞: —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±–ª–æ–∫–æ–≤
snake = [(100, 100), (80, 100), (60, 100)]
direction = (BLOCK, 0)

# –û—á–∫–∏, —É—Ä–æ–≤–µ–Ω—å, —Å–∫–æ—Ä–æ—Å—Ç—å
score = 0
level = 1
speed = 10

# –¢–∞–π–º–µ—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã
class Food:
    def __init__(self):
        self.x = random.randint(0, (WIDTH - BLOCK) // BLOCK) * BLOCK
        self.y = random.randint(0, (HEIGHT - BLOCK) // BLOCK) * BLOCK
        self.weight = random.choice([1, 2, 3])  # –≤–µ—Å –µ–¥—ã
        self.spawn_time = time.time()          # –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.lifetime = random.randint(5, 10)  # —Å–∫–æ–ª—å–∫–æ –∂–∏–≤—ë—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    def draw(self):
        # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Å–∞ –µ–¥—ã
        if self.weight == 1:
            color = RED
        elif self.weight == 2:
            color = GOLD
        else:
            color = WHITE
        pygame.draw.rect(screen, color, (self.x, self.y, BLOCK, BLOCK))

    def is_expired(self):
        return time.time() - self.spawn_time > self.lifetime

    def position(self):
        return (self.x, self.y)

# –°–ø–∏—Å–æ–∫ –µ–¥—ã
foods = [Food()]

clock = pygame.time.Clock()
running = True
while running:
    screen.fill(BLACK)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP] and direction != (0, BLOCK):
        direction = (0, -BLOCK)
    if keys[pygame.K_DOWN] and direction != (0, -BLOCK):
        direction = (0, BLOCK)
    if keys[pygame.K_LEFT] and direction != (BLOCK, 0):
        direction = (-BLOCK, 0)
    if keys[pygame.K_RIGHT] and direction != (-BLOCK, 0):
        direction = (BLOCK, 0)

    # –ù–æ–≤–∞—è –≥–æ–ª–æ–≤–∞
    head = (snake[0][0] + direction[0], snake[0][1] + direction[1])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    if (
        head[0] < 0 or head[0] >= WIDTH or
        head[1] < 0 or head[1] >= HEIGHT or
        head in snake
    ):
        running = False

    snake.insert(0, head)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–µ–¥–∞–Ω–∏–µ –µ–¥—ã
    eaten = False
    for food in foods[:]:
        if head == food.position():
            score += food.weight
            foods.remove(food)
            eaten = True
            break

    if not eaten:
        snake.pop()  # –µ—Å–ª–∏ –Ω–µ —Å—ä–µ–ª ‚Äî —É–¥–∞–ª–∏—Ç—å —Ö–≤–æ—Å—Ç

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –µ–¥—ã
    for food in foods[:]:
        if food.is_expired():
            foods.remove(food)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –µ–¥—ã, –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
    if len(foods) < 2:
        foods.append(Food())

    # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤
    if score // 5 + 1 > level:
        level += 1
        speed += 2

    # –†–∏—Å—É–µ–º –∑–º–µ–π–∫—É
    for block in snake:
        pygame.draw.rect(screen, GREEN, (*block, BLOCK, BLOCK))

    # –†–∏—Å—É–µ–º –µ–¥—É
    for food in foods:
        food.draw()

    # –ü–µ—á–∞—Ç–∞–µ–º —Å—á—ë—Ç –∏ —É—Ä–æ–≤–µ–Ω—å
    score_text = font.render(f"Score: {score}", True, WHITE)
    level_text = font.render(f"Level: {level}", True, WHITE)
    screen.blit(score_text, (10, 10))
    screen.blit(level_text, (WIDTH - 120, 10))

    pygame.display.flip()
    clock.tick(speed)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
pygame.quit()
